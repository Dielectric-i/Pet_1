services:
  # 1) Backend для разработки
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    # Монтируем локальную папку с кодом внутрь контейнера
    volumes:
      - ./backend:/src/backend
    # Вместо сборки — запускаем dotnet watch
    command: dotnet watch --project /src/backend/backend.csproj run --urls http://0.0.0.0:5000
    ports:
      - "5000:5000"       # порт контейнера:порт хоста
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    profiles: ["dev"]     # помечаем как dev‑сервис

  # 2) Frontend для разработки
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - ./frontend:/app         # монтируем код
      - /app/node_modules       # node_modules в контейнере
    command: npm start          # React‑dev‑server с hot reload
    ports:
      - "3000:3000"             # React по умолчанию на 3000
    environment:
      CHOKIDAR_USEPOLLING: "true" # для корректного отслеживания файлов в Docker на Linux
    profiles: ["dev"]

  # 3) Backend для продакшна
  backend-prod:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "5000:5000"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    profiles: ["prod"]

  # 4) Frontend для продакшна
  frontend-prod:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "80:80"
    profiles: ["prod"]
