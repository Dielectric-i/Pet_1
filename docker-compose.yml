services:
  ############################
  #  Database (PostgreSQL)   #
  ############################
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: petuser
      POSTGRES_PASSWORD: petpass
      POSTGRES_DB: petdb
    # restart: unless-stopped
    volumes: [db-data:/var/lib/postgresql/data]
    ports: [5432:5432]
    networks: [petnet]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
  #######################################################
  #  Backend (.NET 9)                                   #
  #######################################################
  backend:
    image: dielectrici/pet1-backend:latest
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__Default=${CONNECTIONSTRINGS__DEFAULT}
      - JWT__KEY=${JWT__KEY}
    ports: [5000:5000]
    networks: [petnet]
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
  #######################################################
  #  Frontend (React + TS)                              #
  #######################################################
  frontend:
    image: dielectrici/pet1-frontend:latest
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports: [3000:80]              # host:container
    networks: [petnet]
    depends_on:
      backend:
        condition: service_healthy

networks:
  petnet:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24
          gateway: 172.30.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "false"

volumes:
  db-data: {}
