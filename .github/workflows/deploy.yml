# Название пайплайна, отображается в интерфейсе GitHub Actions.
name: CI/CD Pipeline

# Триггеры: пайплайн срабатывает при пуше в ветку main.
on:
  push:
    branches:
      - main

# Задачи (jobs), которые выполняет пайплайн.
jobs:
  # Задача для сборки и деплоя.
  build-and-deploy:
    # Используем последнюю версию Ubuntu для выполнения задач.
    runs-on: ubuntu-latest

    # Шаги, которые выполняются последовательно.
    steps:
      # 1. Клонируем репозиторий на машину GitHub Actions.
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Настраиваем Docker Buildаx для поддержки многоплатформенных сборок.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Логинимся в Docker Hub, используя секреты из GitHub.
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4. Собираем и пушим образ для бэкенда.
      - name: Build and push backend (no cache)
        run: |
          docker build \
            --no-cache \
            --tag ${{ secrets.DOCKER_USERNAME }}/pet1-backend:latest \
            -f backend/Dockerfile backend
          docker push ${{ secrets.DOCKER_USERNAME }}/pet1-backend:latest


      # 5. Собираем и пушим образ для фронтенда.
      - name: Build and push frontend (no cache)
        run: |
          docker build \
            --no-cache \
            --tag ${{ secrets.DOCKER_USERNAME }}/pet1-frontend:latest \
            --build-arg VITE_API_BASE_URL=http://backend:5000 \
            -f frontend/Dockerfile frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/pet1-frontend:latest

      # 6. Деплоим на домашний сервер через SSH.
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          key: ${{ secrets.VPS_SSH_SECRET }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            docker compose down
            sleep 5
            docker network rm pet_1_petnet
            sleep 5
            cd ~/Repo/Pet_1
            git pull
            sleep 5
            docker rmi dielectrici/pet1-frontend:latest
            docker rmi dielectrici/pet1-backend:latest
            docker compose pull
            docker compose up -d --force-recreate