# Название пайплайна, отображается в интерфейсе GitHub Actions.
name: CI/CD Pipeline

# Триггеры: пайплайн срабатывает при пуше в ветку main.
on:
  push:
    branches:
      - main
      - test-deploy

# Задачи (jobs), которые выполняет пайплайн.
jobs:
  # Задача для сборки и деплоя.
  build-and-deploy:
    # Используем последнюю версию Ubuntu для выполнения задач.
    runs-on: ubuntu-latest
    # Переменные окружения
    env:
      # Переменные для подключения к базе данных и JWT.
      CONNECTIONSTRINGS__DEFAULT: ${{ secrets.PG_CONN }}
      JWT__KEY: ${{ secrets.JWT_KEY }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      
    # Шаги, которые выполняются последовательно.
    steps:
      - name: check env
        run: |
          echo "CONNECTIONSTRINGS__DEFAULT=${{ secrets.PG_CONN }}"
          echo "JWT__KEY=${{ secrets.JWT_KEY }}"
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}"
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}"
      # # 1. Клонируем репозиторий на машину GitHub Actions.
      # - name: Checkout code
      #   uses: actions/checkout@v4

      # # 2 Логинимся в Docker Hub, используя секреты из GitHub.
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # # 3. Собираем и пушим образ для бэкенда.
      # - name: Build and push backend (no cache)
      #   run: |
      #     docker build \
      #       --no-cache \
      #       --tag ${{ secrets.DOCKER_USERNAME }}/pet1-backend:latest \
      #       -f backend/Dockerfile backend
      #     docker push ${{ secrets.DOCKER_USERNAME }}/pet1-backend:latest


      # # 4. Собираем и пушим образ для фронтенда.
      # - name: Build and push frontend (no cache)
      #   run: |
      #     docker build \
      #       --no-cache \
      #       --tag ${{ secrets.DOCKER_USERNAME }}/pet1-frontend:latest \
      #       -f frontend/Dockerfile frontend
      #     docker push ${{ secrets.DOCKER_USERNAME }}/pet1-frontend:latest

      # 5. Деплоим на домашний сервер через SSH.
      - name: Deploy to MyServer
        uses: appleboy/ssh-action@v1.2.0
        env:
          CONNECTIONSTRINGS__DEFAULT: ${{ secrets.PG_CONN }}
          JWT__KEY: ${{ secrets.JWT_KEY }}
          PoSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        with:
          envs: CONNECTIONSTRINGS__DEFAULT,JWT__KEY,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB
          host: ${{ secrets.VPS_SSH_HOST }}
          username: ${{ secrets.VPS_SSH_USERNAME }}
          key: ${{ secrets.VPS_SSH_SECRET }}
          port: ${{ secrets.VPS_SSH_PORT }}
          script: |
            set -exuo pipefail

            echo ">>> CONN is ${CONNECTIONSTRINGS__DEFAULT}"
            echo ">>> JWT is ${JWT__KEY}"

            cd ~/Repo/Pet_1

            docker compose down  || echo "(docker compose down failed)"

            git pull || echo "(git pull failed)"

            # docker compose pull

            docker compose up --build -d --wait
